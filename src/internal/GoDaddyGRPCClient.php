<?php
# Code generated by sdkgen
# Generated on 2020-07-21 16:24:42.041919895 +0000 UTC using container gcr.io/repcore-prod/sdkgen:latest
# DO NOT EDIT!

namespace Vendasta\Godaddy\V1\internal;

use Vendasta\Vax\GRPCClient;

class GoDaddyGRPCClient extends GRPCClient implements GoDaddyClientInterface
{
    private $client;

    /**
     * Constructor for GoDaddyGRPCClient
     * @param string $hostname hostname of the service to hit
     * @param string $scope
     * @param bool $secure
     * @param float $default_timeout time in milliseconds
     */
    public function __construct(string $hostname, string $scope, bool $secure = true, float $default_timeout = 10000)
    {
        parent::__construct($hostname, $scope, $secure, $default_timeout);
        $this->client = new \Godaddy\V1\GoDaddyClient($hostname, $this->getClientOptions());
    }

    /**
     * Auth wrapper for \Godaddy\V1\GoDaddyClient::GetDomainAvailable
     * @param \Godaddy\V1\GetDomainAvailableRequest $req proto request message
     * @param array $options optional options, possible keys:
     *              \Vendasta\Vax\RequestOptions::*
     * @return \Godaddy\V1\GetDomainAvailableResponse proto response message
     * @throws \Vendasta\Vax\SDKException if this call encounters an error
     */
    public function GetDomainAvailable(\Godaddy\V1\GetDomainAvailableRequest $req, array $options = []): \Godaddy\V1\GetDomainAvailableResponse
    {
        return $this->doRequest(
            array($this->client, 'GetDomainAvailable'),
            $req,
            $options
        );
    }

    /**
     * Auth wrapper for \Godaddy\V1\GoDaddyClient::ReplaceDNSRecordsForType
     * @param \Godaddy\V1\ReplaceDNSRecordsForTypeRequest $req proto request message
     * @param array $options optional options, possible keys:
     *              \Vendasta\Vax\RequestOptions::*
     * @return \Google\Protobuf\GPBEmpty proto response message
     * @throws \Vendasta\Vax\SDKException if this call encounters an error
     */
    public function ReplaceDNSRecordsForType(\Godaddy\V1\ReplaceDNSRecordsForTypeRequest $req, array $options = []): \Google\Protobuf\GPBEmpty
    {
        return $this->doRequest(
            array($this->client, 'ReplaceAllDNSRecords'),
            $req,
            $options
        );
    }

    /**
     * Auth wrapper for \Godaddy\V1\GoDaddyClient::ListDNSRecords
     * @param \Godaddy\V1\ListDNSRecordsRequest $req proto request message
     * @param array $options optional options, possible keys:
     *              \Vendasta\Vax\RequestOptions::*
     * @return \Godaddy\V1\ListDNSRecordsResponse proto response message
     * @throws \Vendasta\Vax\SDKException if this call encounters an error
     */
    public function ListDNSRecords(\Godaddy\V1\ListDNSRecordsRequest $req, array $options = []): \Godaddy\V1\ListDNSRecordsResponse
    {
        return $this->doRequest(
            array($this->client, 'ListDNSRecords'),
            $req,
            $options
        );
    }

    /**
     * Auth wrapper for \Godaddy\V1\GoDaddyClient::PatchDomain
     * @param \Godaddy\V1\PatchDomainRequest $req proto request message
     * @param array $options optional options, possible keys:
     *              \Vendasta\Vax\RequestOptions::*
     * @return \Google\Protobuf\GPBEmpty proto response message
     * @throws \Vendasta\Vax\SDKException if this call encounters an error
     */
    public function PatchDomain(\Godaddy\V1\PatchDomainRequest $req, array $options = []): \Google\Protobuf\GPBEmpty
    {
        return $this->doRequest(
            array($this->client, 'PatchDomain'),
            $req,
            $options
        );
    }
}
