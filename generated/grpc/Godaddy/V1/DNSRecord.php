<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: godaddy/v1/api.proto

namespace Godaddy\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * A Domain Name System record
 * </pre>
 *
 * Protobuf type <code>godaddy.v1.DNSRecord</code>
 */
class DNSRecord extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * The type of a DNS record, ex. TXT
     * </pre>
     *
     * <code>string type = 1;</code>
     */
    private $type = '';
    /**
     * <pre>
     * A given name for a DNS record, ex. &#64; or www
     * </pre>
     *
     * <code>string name = 2;</code>
     */
    private $name = '';
    /**
     * <pre>
     * The information stored in the DNS record (ex. MS=262B3C0BB63077947E38D7B3AB081D70F4C87055)
     * </pre>
     *
     * <code>string data = 3;</code>
     */
    private $data = '';
    /**
     * <pre>
     * The Time To Live for a DNS record
     * </pre>
     *
     * <code>int64 ttl = 4;</code>
     */
    private $ttl = 0;
    /**
     * <pre>
     * The priority of for the record wrt other records, for example used on MX records
     * </pre>
     *
     * <code>int64 priority = 5;</code>
     */
    private $priority = 0;

    public function __construct() {
        \GPBMetadata\Godaddy\V1\Api::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * The type of a DNS record, ex. TXT
     * </pre>
     *
     * <code>string type = 1;</code>
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * <pre>
     * The type of a DNS record, ex. TXT
     * </pre>
     *
     * <code>string type = 1;</code>
     */
    public function setType($var)
    {
        GPBUtil::checkString($var, True);
        $this->type = $var;
    }

    /**
     * <pre>
     * A given name for a DNS record, ex. &#64; or www
     * </pre>
     *
     * <code>string name = 2;</code>
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * <pre>
     * A given name for a DNS record, ex. &#64; or www
     * </pre>
     *
     * <code>string name = 2;</code>
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;
    }

    /**
     * <pre>
     * The information stored in the DNS record (ex. MS=262B3C0BB63077947E38D7B3AB081D70F4C87055)
     * </pre>
     *
     * <code>string data = 3;</code>
     */
    public function getData()
    {
        return $this->data;
    }

    /**
     * <pre>
     * The information stored in the DNS record (ex. MS=262B3C0BB63077947E38D7B3AB081D70F4C87055)
     * </pre>
     *
     * <code>string data = 3;</code>
     */
    public function setData($var)
    {
        GPBUtil::checkString($var, True);
        $this->data = $var;
    }

    /**
     * <pre>
     * The Time To Live for a DNS record
     * </pre>
     *
     * <code>int64 ttl = 4;</code>
     */
    public function getTtl()
    {
        return $this->ttl;
    }

    /**
     * <pre>
     * The Time To Live for a DNS record
     * </pre>
     *
     * <code>int64 ttl = 4;</code>
     */
    public function setTtl($var)
    {
        GPBUtil::checkInt64($var);
        $this->ttl = $var;
    }

    /**
     * <pre>
     * The priority of for the record wrt other records, for example used on MX records
     * </pre>
     *
     * <code>int64 priority = 5;</code>
     */
    public function getPriority()
    {
        return $this->priority;
    }

    /**
     * <pre>
     * The priority of for the record wrt other records, for example used on MX records
     * </pre>
     *
     * <code>int64 priority = 5;</code>
     */
    public function setPriority($var)
    {
        GPBUtil::checkInt64($var);
        $this->priority = $var;
    }

}

